#!/usr/bin/env bash

bindir=
libdir=
logdir=
tmpdir=
cmd="${1}"; shift

## Global utility functions #######################################################################
function pprint() {
  local blue='\033[1;34m'
  local green='\033[1;32m'
  local red='\033[1;31m'
  local normal='\033[0m'
  local white='\033[1;37m'

  while (( "$#" )); do
    case "${1}" in
      -n) local n='-n'; shift ;;
      -q) local q='-q'; shift ;;
      *)
        test -n "${1}" && test -n "${adj}" && local msg=${1}
        test -n "${1}" && test -z "${adj}" && local adj=${1}
        shift
      ;;
    esac
  done

  if [ -z "${q}" ]; then
    case "${adj}" in
      bad) echo -e ${n} "${red}${msg}${normal}" ;;
      good) echo -e ${n} "${green}${msg}${normal}" ;;
      head) echo -e ${n} "${blue}==>${normal} ${white}${msg}${normal}" ;;
      subhead) echo -e ${n} "${green}==>${normal} ${white}${msg}${normal}" ;;
      *) echo ${n} "${msg}" ;;
    esac
  fi
}
export -f pprint

## Argument and option parsing ####################################################################
while (( "$#" )); do
  case "${1}" in
    --as=*) as=${1/--as=/''}; shift ;;
    --against=*) against=${1/--against=/''}; shift ;;
    --backup-encryption-password=*) backup_encryption_password=${1/--backup-encryption-password=/''}; shift ;;
    --cesecurity-password=*) cesecurity_password=${1/--cesecurity-password=/''}; shift ;;
    --command=*) cmnd=${1/--command=/''}; shift ;;
    --deploy) deploy='0'; shift ;;
    --elements-password=*) elements_password=${1/--elements-password=/''}; shift ;;
    --init) init='0'; shift ;;
    --key=*) key=${1/--key=/''}; shift ;;
    --master-encryption-password=*) master_encryption_password=${1/--master-encryption-password=/''}; shift ;;
    --quiet) quiet='-q'; shift ;;
    --username=*) username=${1/--username=/''}; shift ;;
    *)
      case "${cmd}" in
        exec)
          test -n "${1}" && test -z "${cmnd}" && cmnd=${1}
        ;;
        key)
          test -n "${1}" && test -n "${username}" && key=${1}
          test -n "${1}" && test -z "${username}" && username=${1}
        ;;
      esac
      shift
    ;;
  esac
done

## Argument and option prompting ##################################################################
case "${cmd}" in
  build)
    if [ -n "${init}" ]; then
      test -z "${elements_password}" \
        && { read -e -p 'Enter Elements password: ' -s elements_password; echo; }
      test -z "${cesecurity_password}" \
        && { read -e -p 'Enter CE security password: ' -s cesecurity_password; echo; }
      test -z "${master_encryption_password}" \
        && { read -e -p 'Enter master encryption password: ' -s master_encryption_password; echo; }
      test -z "${backup_encryption_password}" \
        && { read -e -p 'Enter backup encryption password: ' -s backup_encryption_password; echo; }
    fi
  ;;
  deploy)
    test -z "${elements_password}" \
      && { read -e -p 'Enter Elements password: ' -s elements_password; echo; }
    test -z "${cesecurity_password}" \
      && { read -e -p 'Enter CE security password: ' -s cesecurity_password; echo; }
  ;;
  exec)
    test -z "${cmnd}" && read -e -p 'Enter command: ' cmnd
  ;;
  key)
    test -z "${username}" && read -e -p 'Enter username (e.g. rocky): ' username
    test -z "${key}" && read -e -p 'Enter key (e.g. https://github.com/rockymadden.keys): ' key
  ;;
esac

## Command utility functions ######################################################################
function ingest() {
  mkdir -p "${libdir}/group_vars" && \
  rm -f "${libdir}/cloud" && \
  rsync -a "$(pwd)/hykes.ini" "${libdir}/cloud" && \
  rm -f "${libdir}/group_vars/cloud" && \
  rsync -a "$(pwd)/hykes.yml" "${libdir}/group_vars/cloud" && \
  rm -rf "${libdir}/roles/app/configs" && mkdir -p "${libdir}/roles/app/configs" && \
  { rsync -a --delete "$(pwd)/app/" "${libdir}/roles/app/configs/" 2>/dev/null || true; } && \
  rm -rf "${libdir}/roles/cache/configs" && mkdir -p "${libdir}/roles/cache/configs" && \
  { rsync -a --delete "$(pwd)/cache/" "${libdir}/roles/cache/configs/" 2>/dev/null || true; } && \
  rm -rf "${libdir}/roles/cloud" && mkdir -p "${libdir}/roles/cloud/configs" && \
  { rsync -a --delete "$(pwd)/cloud/" "${libdir}/roles/cloud/configs/" 2>/dev/null || true; } && \
  rm -rf "${libdir}/roles/database/configs" && mkdir -p "${libdir}/roles/database/configs" && \
  { rsync -a --delete "$(pwd)/database/" "${libdir}/roles/database/configs/" 2>/dev/null || true; } && \
  rm -rf "${libdir}/roles/loadbalance/configs" && mkdir -p "${libdir}/roles/loadbalance/configs" && \
  { rsync -a --delete "$(pwd)/loadbalance/" "${libdir}/roles/loadbalance/configs/" 2>/dev/null || true; } && \
  rm -rf "${libdir}/roles/logpipe/configs" && mkdir -p "${libdir}/roles/logpipe/configs" && \
  { rsync -a --delete "$(pwd)/logpipe/" "${libdir}/roles/logpipe/configs/" 2>/dev/null || true; } && \
  rm -rf "${libdir}/roles/logstore/configs" && mkdir -p "${libdir}/roles/logstore/configs" && \
  { rsync -a --delete "$(pwd)/logstore/" "${libdir}/roles/logstore/configs/" 2>/dev/null || true; } && \
  rm -rf "${libdir}/roles/message/configs" && mkdir -p "${libdir}/roles/message/configs" && \
  { rsync -a --delete "$(pwd)/message/" "${libdir}/roles/message/configs/" 2>/dev/null || true; }
}

## Command functions ##############################################################################
function build() {
  local pwd="'pwd':'${libdir}',"
  if [ -n "${against}" ]; then local limit="'limit':'${against}',"; fi
  if [ -n "${as}" ]; then local user="--user=${as}"; fi
  if [ -n "${backup_encryption_password}" ]; then local bkpass="'backup_encryption_password':'${backup_encryption_password}',"; fi
  if [ -n "${cesecurity_password}" ]; then local cepass="'cesecurity_password':'${cesecurity_password}',"; fi
  if [ -n "${elements_password}" ]; then local elpass="'elements_password':'${elements_password}',"; fi
  if [ -n "${init}" ]; then local init="'init':'1',"; fi
  if [ -n "${master_encryption_password}" ]; then local mspass="'master_encryption_password':'${master_encryption_password}',"; fi

  pprint head 'Build' ${quiet}

  pprint subhead 'Ingesting' ${quiet}
  ingest || { pprint bad 'failed' ${quiet}; return 1; }

  pprint subhead 'Executing' ${quiet}
  ansible-playbook -i "${libdir}/cloud" "${libdir}/cloud.yml" -vvvv ${user} \
    --extra-vars "{${bkpass}${cepass}${elpass}${init}${limit}${mspass}${pwd}}" \
    || { pprint bad 'failed' ${quiet}; return 1; }
}

function deploy() {
  local cepass="'cesecurity_password':'${cesecurity_password}',"
  local elpass="'elements_password':'${elements_password}',"
  local pwd="'pwd':'${libdir}',"
  if [ -n "${against}" ]; then local limit="'limit':'${against}',"; fi
  if [ -n "${as}" ]; then local user="--user=${as}"; fi

  pprint head 'Deploy' ${quiet}

  pprint subhead 'Ingesting' ${quiet}
  ingest || { pprint bad 'failed' ${quiet}; return 1; }

  pprint subhead 'Executing' ${quiet}
  ansible-playbook -i "${libdir}/cloud" "${libdir}/util_deploy.yml" -vvvv ${user} \
    --extra-vars "{${cepass}${elpass}${limit}${pwd}}" \
    || { pprint bad 'failed' ${quiet}; return 1; }
}

function exec() {
  local cmnd="'command':'${cmnd}',"
  local pwd="'pwd':'${libdir}',"
  if [ -n "${against}" ]; then local limit="'limit':'${against}',"; fi
  if [ -n "${as}" ]; then local user="--user=${as}"; fi

  pprint head 'Execute' ${quiet}

  pprint subhead 'Ingesting' ${quiet}
  ingest || { pprint bad 'failed' ${quiet}; return 1; }

  pprint subhead 'Executing' ${quiet}
  ansible-playbook -i "${libdir}/cloud" "${libdir}/util_exec.yml" -vvvv ${user} \
    --extra-vars "{${cmnd}${limit}${pwd}}" \
    || { pprint bad 'failed' ${quiet}; return 1; }
}

function help() {
  a=(${0//\// })
  bin=${a[${#a[@]}-1]}

  echo 'Usage:'
  echo "  ${bin} build [--against=<role>] [--as=<username>] [--init] [--quiet]"
  echo "  ${bin} deploy [--against=<role>] [--as=<username>] [--quiet]"
  echo "  ${bin} exec <command> [--against=<role>] [--as=<username>] [--quiet]"
  echo "  ${bin} key <username> <key> [--against=<role>] [--as=<username>] [--quiet]"
  echo "  ${bin} resume [--against=<role>] [--as=<username>] [--quiet]"
  echo "  ${bin} suspend [--against=<role>] [--as=<username>] [--quiet]"
  echo
  echo 'Core Commands:'
  echo '  build      Build or rebuild cloud'
  echo '  deploy     Deploy to cloud'
  echo '  exec       Execute command against cloud'
  echo '  key        Key or rekey cloud'
  echo '  resume     Resume cloud (publicly consumable)'
  echo '  suspend    Suspend cloud (not publicly consumable)'
  echo
  echo 'More Information:'
  echo '  docs     https://developers.cloud-elements.com'
  echo '  forum    https://forum.cloud-elements.com'
  echo '  repo     https://github.com/cloud-elements/hykes-engine'
}

function key() {
  local key="'key':'${key}',"
  local pwd="'pwd':'${libdir}',"
  local username="'username':'${username}',"
  if [ -n "${against}" ]; then local limit="'limit':'${against}',"; fi
  if [ -n "${as}" ]; then local user="--user=${as}"; fi

  pprint head 'Key' ${quiet}

  pprint subhead 'Ingesting' ${quiet}
  ingest || { pprint bad 'failed' ${quiet}; return 1; }

  pprint subhead 'Executing' ${quiet}
  ansible-playbook -i "${libdir}/cloud" "${libdir}/util_key.yml" -vvvv ${user} \
    --extra-vars "{${key}${limit}${pwd}${username}}" \
    || { pprint bad 'failed' ${quiet}; return 1; }
}

function resume() {
  local pwd="'pwd':'${libdir}',"
  if [ -n "${against}" ]; then local limit="'limit':'${against}',"; fi
  if [ -n "${as}" ]; then local user="--user=${as}"; fi

  pprint head 'Resume' ${quiet}

  pprint subhead 'Ingesting' ${quiet}
  ingest || { pprint bad 'failed' ${quiet}; return 1; }

  pprint subhead 'Executing' ${quiet}
  ansible-playbook -i "${libdir}/cloud" "${libdir}/util_resume.yml" -vvvv ${user} \
    --extra-vars "{${limit}${pwd}}" \
    || { pprint bad 'failed'; return 1; }
}

function suspend() {
  local pwd="'pwd':'${libdir}',"
  if [ -n "${against}" ]; then local limit="'limit':'${against}',"; fi
  if [ -n "${as}" ]; then local user="--user=${as}"; fi

  pprint head 'Suspend' ${quiet}

  pprint subhead 'Ingesting' ${quiet}
  ingest || { pprint bad 'failed' ${quiet}; return 1; }

  pprint subhead 'Executing' ${quiet}
  ansible-playbook -i "${libdir}/cloud" "${libdir}/util_suspend.yml" -vvvv ${user} \
    --extra-vars "{${limit}${pwd}}" \
    || { pprint bad 'failed'; return 1; }
}

function version() {
  echo 'v0.0.0'
}

## Command routing ################################################################################
case "${cmd}" in
  --help|-h) help; exit 0 ;;
  --version|-v) version; exit 0 ;;
  build|deploy|exec|key|resume|suspend)
    export ANSIBLE_HOST_KEY_CHECKING=False
    export ANSIBLE_LOG_PATH="${logdir}/hykes-engine.ansible.log"
    export ANSIBLE_SSH_CONTROL_PATH='%(directory)s/%%h'
    export ANSIBLE_SSH_RETRIES=8
    export ANSIBLE_TIMEOUT=16
    "${cmd}"
    exit "$?"
  ;;
  *) help; exit 1 ;;
esac
